Program(
    [
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(3:0-6),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(3:0-5),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(3:0-3),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(3:0-3), "foo"),
                                    ),
                                ),
                                targs: [],
                                args: [],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(7:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(7:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(7:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(7:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(7:5-6),
                                    Int(
                                        "1",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(8:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(8:0-12),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(8:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(8:0-2),
                                            (
                                                0,
                                                "$b",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(8:5-12),
                                    String(
                                        "hello",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(9:0-12),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(9:0-11),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(9:0-3),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(9:0-3), "foo"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(9:4-6),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(9:4-6),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(9:8-10),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(9:8-10),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(14:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(14:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(14:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(14:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(14:5-6),
                                    Int(
                                        "1",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(15:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(15:0-12),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(15:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(15:0-2),
                                            (
                                                0,
                                                "$b",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(15:5-12),
                                    String(
                                        "hello",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(17:0-12),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(17:0-11),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(17:0-3),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(17:0-3), "foo"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(17:4-6),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(17:4-6),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(17:8-10),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(17:8-10),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Fun(
            FunDef {
                namespace: Env {
                    ns_uses: {
                        "Rx": "HH\\Rx",
                    },
                    class_uses: {
                        "AnyArray": "HH\\AnyArray",
                        "AsyncFunctionWaitHandle": "HH\\AsyncFunctionWaitHandle",
                        "AsyncGenerator": "HH\\AsyncGenerator",
                        "AsyncGeneratorWaitHandle": "HH\\AsyncGeneratorWaitHandle",
                        "AsyncIterator": "HH\\AsyncIterator",
                        "AsyncKeyedIterator": "HH\\AsyncKeyedIterator",
                        "AwaitAllWaitHandle": "HH\\AwaitAllWaitHandle",
                        "Awaitable": "HH\\Awaitable",
                        "Collection": "HH\\Collection",
                        "ConcurrentWaitHandle": "HH\\ConcurrentWaitHandle",
                        "ConditionWaitHandle": "HH\\ConditionWaitHandle",
                        "Container": "HH\\Container",
                        "ExternalThreadEventWaitHandle": "HH\\ExternalThreadEventWaitHandle",
                        "IMemoizeParam": "HH\\IMemoizeParam",
                        "ImmMap": "HH\\ImmMap",
                        "ImmSet": "HH\\ImmSet",
                        "ImmVector": "HH\\ImmVector",
                        "InvariantException": "HH\\InvariantException",
                        "Iterable": "HH\\Iterable",
                        "Iterator": "HH\\Iterator",
                        "KeyedContainer": "HH\\KeyedContainer",
                        "KeyedIterable": "HH\\KeyedIterable",
                        "KeyedIterator": "HH\\KeyedIterator",
                        "KeyedTraversable": "HH\\KeyedTraversable",
                        "Map": "HH\\Map",
                        "ObjprofObjectStats": "HH\\ObjprofObjectStats",
                        "ObjprofPathsStats": "HH\\ObjprofPathsStats",
                        "ObjprofStringStats": "HH\\ObjprofStringStats",
                        "Pair": "HH\\Pair",
                        "RescheduleWaitHandle": "HH\\RescheduleWaitHandle",
                        "ResumableWaitHandle": "HH\\ResumableWaitHandle",
                        "Set": "HH\\Set",
                        "Shapes": "HH\\Shapes",
                        "SleepWaitHandle": "HH\\SleepWaitHandle",
                        "StaticWaitHandle": "HH\\StaticWaitHandle",
                        "Traversable": "HH\\Traversable",
                        "TypeStructure": "HH\\TypeStructure",
                        "TypeStructureKind": "HH\\TypeStructureKind",
                        "UNSAFESingletonMemoizeParam": "HH\\UNSAFESingletonMemoizeParam",
                        "Vector": "HH\\Vector",
                        "WaitableWaitHandle": "HH\\WaitableWaitHandle",
                        "XenonSample": "HH\\XenonSample",
                        "classname": "HH\\classname",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "keyset": "HH\\keyset",
                        "supportdyn": "HH\\supportdyn",
                        "typename": "HH\\typename",
                        "varray": "HH\\varray",
                        "varray_or_darray": "HH\\varray_or_darray",
                        "vec": "HH\\vec",
                        "vec_or_dict": "HH\\vec_or_dict",
                    },
                    fun_uses: {
                        "asio_get_current_context_idx": "HH\\asio_get_current_context_idx",
                        "asio_get_running": "HH\\asio_get_running",
                        "asio_get_running_in_context": "HH\\asio_get_running_in_context",
                        "class_meth": "HH\\class_meth",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "fun": "HH\\fun",
                        "heapgraph_create": "HH\\heapgraph_create",
                        "heapgraph_dfs_edges": "HH\\heapgraph_dfs_edges",
                        "heapgraph_dfs_nodes": "HH\\heapgraph_dfs_nodes",
                        "heapgraph_edge": "HH\\heapgraph_edge",
                        "heapgraph_foreach_edge": "HH\\heapgraph_foreach_edge",
                        "heapgraph_foreach_node": "HH\\heapgraph_foreach_node",
                        "heapgraph_foreach_root": "HH\\heapgraph_foreach_root",
                        "heapgraph_node": "HH\\heapgraph_node",
                        "heapgraph_node_in_edges": "HH\\heapgraph_node_in_edges",
                        "heapgraph_node_out_edges": "HH\\heapgraph_node_out_edges",
                        "heapgraph_stats": "HH\\heapgraph_stats",
                        "idx": "HH\\idx",
                        "idx_readonly": "HH\\idx_readonly",
                        "inst_meth": "HH\\inst_meth",
                        "invariant": "HH\\invariant",
                        "invariant_callback_register": "HH\\invariant_callback_register",
                        "invariant_violation": "HH\\invariant_violation",
                        "is_darray": "HH\\is_darray",
                        "is_dict": "HH\\is_dict",
                        "is_keyset": "HH\\is_keyset",
                        "is_varray": "HH\\is_varray",
                        "is_vec": "HH\\is_vec",
                        "keyset": "HH\\keyset",
                        "meth_caller": "HH\\meth_caller",
                        "objprof_get_data": "HH\\objprof_get_data",
                        "objprof_get_data_extended": "HH\\objprof_get_data_extended",
                        "objprof_get_paths": "HH\\objprof_get_paths",
                        "package_exists": "HH\\package_exists",
                        "server_warmup_status": "HH\\server_warmup_status",
                        "thread_mark_stack": "HH\\thread_mark_stack",
                        "thread_memory_stats": "HH\\thread_memory_stats",
                        "type_structure": "HH\\type_structure",
                        "type_structure_for_alias": "HH\\type_structure_for_alias",
                        "varray": "HH\\varray",
                        "vec": "HH\\vec",
                        "xenon_get_data": "HH\\xenon_get_data",
                    },
                    const_uses: {},
                    name: None,
                    is_codegen: false,
                    disable_xhp_element_mangling: false,
                },
                file_attributes: [],
                mode: Mstrict,
                name: Id(root|aast-output/basic_stmt.hack(19:9-12), "foo"),
                fun: Fun_ {
                    span: root|aast-output/basic_stmt.hack(19:0-21:1),
                    readonly_this: None,
                    annotation: (),
                    readonly_ret: None,
                    ret: TypeHint(
                        (),
                        Some(
                            Hint(
                                root|aast-output/basic_stmt.hack(19:31-35),
                                Happly(
                                    Id(root|aast-output/basic_stmt.hack(19:31-35), "void"),
                                    [],
                                ),
                            ),
                        ),
                    ),
                    params: [
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(19:13-16),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(19:13-16), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(19:17-19),
                            name: "$a",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(19:21-24),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(19:21-24), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(19:25-27),
                            name: "$b",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                    ],
                    ctxs: None,
                    unsafe_ctxs: None,
                    body: FuncBody {
                        fb_ast: Block(
                            [
                                Stmt(
                                    Pos::NONE,
                                    Noop,
                                ),
                            ],
                        ),
                    },
                    fun_kind: FSync,
                    user_attributes: UserAttributes(
                        [],
                    ),
                    external: false,
                    doc_comment: None,
                },
                internal: false,
                module: None,
                tparams: [],
                where_constraints: [],
            },
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(24:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(24:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(24:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(24:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(24:5-6),
                                    Int(
                                        "1",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(25:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(25:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(25:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(25:0-2),
                                            (
                                                0,
                                                "$b",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(25:5-6),
                                    Int(
                                        "2",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(26:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(26:0-12),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(26:0-4),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(26:0-4), "foo2"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(26:5-7),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(26:5-7),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(26:9-11),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(26:9-11),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Fun(
            FunDef {
                namespace: Env {
                    ns_uses: {
                        "Rx": "HH\\Rx",
                    },
                    class_uses: {
                        "AnyArray": "HH\\AnyArray",
                        "AsyncFunctionWaitHandle": "HH\\AsyncFunctionWaitHandle",
                        "AsyncGenerator": "HH\\AsyncGenerator",
                        "AsyncGeneratorWaitHandle": "HH\\AsyncGeneratorWaitHandle",
                        "AsyncIterator": "HH\\AsyncIterator",
                        "AsyncKeyedIterator": "HH\\AsyncKeyedIterator",
                        "AwaitAllWaitHandle": "HH\\AwaitAllWaitHandle",
                        "Awaitable": "HH\\Awaitable",
                        "Collection": "HH\\Collection",
                        "ConcurrentWaitHandle": "HH\\ConcurrentWaitHandle",
                        "ConditionWaitHandle": "HH\\ConditionWaitHandle",
                        "Container": "HH\\Container",
                        "ExternalThreadEventWaitHandle": "HH\\ExternalThreadEventWaitHandle",
                        "IMemoizeParam": "HH\\IMemoizeParam",
                        "ImmMap": "HH\\ImmMap",
                        "ImmSet": "HH\\ImmSet",
                        "ImmVector": "HH\\ImmVector",
                        "InvariantException": "HH\\InvariantException",
                        "Iterable": "HH\\Iterable",
                        "Iterator": "HH\\Iterator",
                        "KeyedContainer": "HH\\KeyedContainer",
                        "KeyedIterable": "HH\\KeyedIterable",
                        "KeyedIterator": "HH\\KeyedIterator",
                        "KeyedTraversable": "HH\\KeyedTraversable",
                        "Map": "HH\\Map",
                        "ObjprofObjectStats": "HH\\ObjprofObjectStats",
                        "ObjprofPathsStats": "HH\\ObjprofPathsStats",
                        "ObjprofStringStats": "HH\\ObjprofStringStats",
                        "Pair": "HH\\Pair",
                        "RescheduleWaitHandle": "HH\\RescheduleWaitHandle",
                        "ResumableWaitHandle": "HH\\ResumableWaitHandle",
                        "Set": "HH\\Set",
                        "Shapes": "HH\\Shapes",
                        "SleepWaitHandle": "HH\\SleepWaitHandle",
                        "StaticWaitHandle": "HH\\StaticWaitHandle",
                        "Traversable": "HH\\Traversable",
                        "TypeStructure": "HH\\TypeStructure",
                        "TypeStructureKind": "HH\\TypeStructureKind",
                        "UNSAFESingletonMemoizeParam": "HH\\UNSAFESingletonMemoizeParam",
                        "Vector": "HH\\Vector",
                        "WaitableWaitHandle": "HH\\WaitableWaitHandle",
                        "XenonSample": "HH\\XenonSample",
                        "classname": "HH\\classname",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "keyset": "HH\\keyset",
                        "supportdyn": "HH\\supportdyn",
                        "typename": "HH\\typename",
                        "varray": "HH\\varray",
                        "varray_or_darray": "HH\\varray_or_darray",
                        "vec": "HH\\vec",
                        "vec_or_dict": "HH\\vec_or_dict",
                    },
                    fun_uses: {
                        "asio_get_current_context_idx": "HH\\asio_get_current_context_idx",
                        "asio_get_running": "HH\\asio_get_running",
                        "asio_get_running_in_context": "HH\\asio_get_running_in_context",
                        "class_meth": "HH\\class_meth",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "fun": "HH\\fun",
                        "heapgraph_create": "HH\\heapgraph_create",
                        "heapgraph_dfs_edges": "HH\\heapgraph_dfs_edges",
                        "heapgraph_dfs_nodes": "HH\\heapgraph_dfs_nodes",
                        "heapgraph_edge": "HH\\heapgraph_edge",
                        "heapgraph_foreach_edge": "HH\\heapgraph_foreach_edge",
                        "heapgraph_foreach_node": "HH\\heapgraph_foreach_node",
                        "heapgraph_foreach_root": "HH\\heapgraph_foreach_root",
                        "heapgraph_node": "HH\\heapgraph_node",
                        "heapgraph_node_in_edges": "HH\\heapgraph_node_in_edges",
                        "heapgraph_node_out_edges": "HH\\heapgraph_node_out_edges",
                        "heapgraph_stats": "HH\\heapgraph_stats",
                        "idx": "HH\\idx",
                        "idx_readonly": "HH\\idx_readonly",
                        "inst_meth": "HH\\inst_meth",
                        "invariant": "HH\\invariant",
                        "invariant_callback_register": "HH\\invariant_callback_register",
                        "invariant_violation": "HH\\invariant_violation",
                        "is_darray": "HH\\is_darray",
                        "is_dict": "HH\\is_dict",
                        "is_keyset": "HH\\is_keyset",
                        "is_varray": "HH\\is_varray",
                        "is_vec": "HH\\is_vec",
                        "keyset": "HH\\keyset",
                        "meth_caller": "HH\\meth_caller",
                        "objprof_get_data": "HH\\objprof_get_data",
                        "objprof_get_data_extended": "HH\\objprof_get_data_extended",
                        "objprof_get_paths": "HH\\objprof_get_paths",
                        "package_exists": "HH\\package_exists",
                        "server_warmup_status": "HH\\server_warmup_status",
                        "thread_mark_stack": "HH\\thread_mark_stack",
                        "thread_memory_stats": "HH\\thread_memory_stats",
                        "type_structure": "HH\\type_structure",
                        "type_structure_for_alias": "HH\\type_structure_for_alias",
                        "varray": "HH\\varray",
                        "vec": "HH\\vec",
                        "xenon_get_data": "HH\\xenon_get_data",
                    },
                    const_uses: {},
                    name: None,
                    is_codegen: false,
                    disable_xhp_element_mangling: false,
                },
                file_attributes: [],
                mode: Mstrict,
                name: Id(root|aast-output/basic_stmt.hack(28:9-13), "foo2"),
                fun: Fun_ {
                    span: root|aast-output/basic_stmt.hack(28:0-32:1),
                    readonly_this: None,
                    annotation: (),
                    readonly_ret: None,
                    ret: TypeHint(
                        (),
                        Some(
                            Hint(
                                root|aast-output/basic_stmt.hack(28:32-35),
                                Happly(
                                    Id(root|aast-output/basic_stmt.hack(28:32-35), "int"),
                                    [],
                                ),
                            ),
                        ),
                    ),
                    params: [
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(28:14-17),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(28:14-17), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(28:18-20),
                            name: "$a",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(28:22-25),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(28:22-25), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(28:26-28),
                            name: "$b",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                    ],
                    ctxs: None,
                    unsafe_ctxs: None,
                    body: FuncBody {
                        fb_ast: Block(
                            [
                                Stmt(
                                    root|aast-output/basic_stmt.hack(29:1-10),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(29:1-9),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(29:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(29:1-3),
                                                                (
                                                                    0,
                                                                    "$c",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(29:6-9),
                                                        Float(
                                                            "1.0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(30:1-8),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(30:1-7),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(30:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(30:1-3),
                                                                (
                                                                    0,
                                                                    "$d",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(30:6-7),
                                                        Int(
                                                            "0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(31:1-11),
                                    Return(
                                        Some(
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(31:8-10),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(31:8-10),
                                                        (
                                                            0,
                                                            "$c",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                    fun_kind: FSync,
                    user_attributes: UserAttributes(
                        [],
                    ),
                    external: false,
                    doc_comment: None,
                },
                internal: false,
                module: None,
                tparams: [],
                where_constraints: [],
            },
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(35:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(35:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(35:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(35:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(35:5-6),
                                    Int(
                                        "1",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(36:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(36:0-12),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(36:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(36:0-2),
                                            (
                                                0,
                                                "$b",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(36:5-12),
                                    String(
                                        "hello",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(38:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(38:0-12),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(38:0-4),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(38:0-4), "foo3"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(38:5-7),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(38:5-7),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(38:9-11),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(38:9-11),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Fun(
            FunDef {
                namespace: Env {
                    ns_uses: {
                        "Rx": "HH\\Rx",
                    },
                    class_uses: {
                        "AnyArray": "HH\\AnyArray",
                        "AsyncFunctionWaitHandle": "HH\\AsyncFunctionWaitHandle",
                        "AsyncGenerator": "HH\\AsyncGenerator",
                        "AsyncGeneratorWaitHandle": "HH\\AsyncGeneratorWaitHandle",
                        "AsyncIterator": "HH\\AsyncIterator",
                        "AsyncKeyedIterator": "HH\\AsyncKeyedIterator",
                        "AwaitAllWaitHandle": "HH\\AwaitAllWaitHandle",
                        "Awaitable": "HH\\Awaitable",
                        "Collection": "HH\\Collection",
                        "ConcurrentWaitHandle": "HH\\ConcurrentWaitHandle",
                        "ConditionWaitHandle": "HH\\ConditionWaitHandle",
                        "Container": "HH\\Container",
                        "ExternalThreadEventWaitHandle": "HH\\ExternalThreadEventWaitHandle",
                        "IMemoizeParam": "HH\\IMemoizeParam",
                        "ImmMap": "HH\\ImmMap",
                        "ImmSet": "HH\\ImmSet",
                        "ImmVector": "HH\\ImmVector",
                        "InvariantException": "HH\\InvariantException",
                        "Iterable": "HH\\Iterable",
                        "Iterator": "HH\\Iterator",
                        "KeyedContainer": "HH\\KeyedContainer",
                        "KeyedIterable": "HH\\KeyedIterable",
                        "KeyedIterator": "HH\\KeyedIterator",
                        "KeyedTraversable": "HH\\KeyedTraversable",
                        "Map": "HH\\Map",
                        "ObjprofObjectStats": "HH\\ObjprofObjectStats",
                        "ObjprofPathsStats": "HH\\ObjprofPathsStats",
                        "ObjprofStringStats": "HH\\ObjprofStringStats",
                        "Pair": "HH\\Pair",
                        "RescheduleWaitHandle": "HH\\RescheduleWaitHandle",
                        "ResumableWaitHandle": "HH\\ResumableWaitHandle",
                        "Set": "HH\\Set",
                        "Shapes": "HH\\Shapes",
                        "SleepWaitHandle": "HH\\SleepWaitHandle",
                        "StaticWaitHandle": "HH\\StaticWaitHandle",
                        "Traversable": "HH\\Traversable",
                        "TypeStructure": "HH\\TypeStructure",
                        "TypeStructureKind": "HH\\TypeStructureKind",
                        "UNSAFESingletonMemoizeParam": "HH\\UNSAFESingletonMemoizeParam",
                        "Vector": "HH\\Vector",
                        "WaitableWaitHandle": "HH\\WaitableWaitHandle",
                        "XenonSample": "HH\\XenonSample",
                        "classname": "HH\\classname",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "keyset": "HH\\keyset",
                        "supportdyn": "HH\\supportdyn",
                        "typename": "HH\\typename",
                        "varray": "HH\\varray",
                        "varray_or_darray": "HH\\varray_or_darray",
                        "vec": "HH\\vec",
                        "vec_or_dict": "HH\\vec_or_dict",
                    },
                    fun_uses: {
                        "asio_get_current_context_idx": "HH\\asio_get_current_context_idx",
                        "asio_get_running": "HH\\asio_get_running",
                        "asio_get_running_in_context": "HH\\asio_get_running_in_context",
                        "class_meth": "HH\\class_meth",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "fun": "HH\\fun",
                        "heapgraph_create": "HH\\heapgraph_create",
                        "heapgraph_dfs_edges": "HH\\heapgraph_dfs_edges",
                        "heapgraph_dfs_nodes": "HH\\heapgraph_dfs_nodes",
                        "heapgraph_edge": "HH\\heapgraph_edge",
                        "heapgraph_foreach_edge": "HH\\heapgraph_foreach_edge",
                        "heapgraph_foreach_node": "HH\\heapgraph_foreach_node",
                        "heapgraph_foreach_root": "HH\\heapgraph_foreach_root",
                        "heapgraph_node": "HH\\heapgraph_node",
                        "heapgraph_node_in_edges": "HH\\heapgraph_node_in_edges",
                        "heapgraph_node_out_edges": "HH\\heapgraph_node_out_edges",
                        "heapgraph_stats": "HH\\heapgraph_stats",
                        "idx": "HH\\idx",
                        "idx_readonly": "HH\\idx_readonly",
                        "inst_meth": "HH\\inst_meth",
                        "invariant": "HH\\invariant",
                        "invariant_callback_register": "HH\\invariant_callback_register",
                        "invariant_violation": "HH\\invariant_violation",
                        "is_darray": "HH\\is_darray",
                        "is_dict": "HH\\is_dict",
                        "is_keyset": "HH\\is_keyset",
                        "is_varray": "HH\\is_varray",
                        "is_vec": "HH\\is_vec",
                        "keyset": "HH\\keyset",
                        "meth_caller": "HH\\meth_caller",
                        "objprof_get_data": "HH\\objprof_get_data",
                        "objprof_get_data_extended": "HH\\objprof_get_data_extended",
                        "objprof_get_paths": "HH\\objprof_get_paths",
                        "package_exists": "HH\\package_exists",
                        "server_warmup_status": "HH\\server_warmup_status",
                        "thread_mark_stack": "HH\\thread_mark_stack",
                        "thread_memory_stats": "HH\\thread_memory_stats",
                        "type_structure": "HH\\type_structure",
                        "type_structure_for_alias": "HH\\type_structure_for_alias",
                        "varray": "HH\\varray",
                        "vec": "HH\\vec",
                        "xenon_get_data": "HH\\xenon_get_data",
                    },
                    const_uses: {},
                    name: None,
                    is_codegen: false,
                    disable_xhp_element_mangling: false,
                },
                file_attributes: [],
                mode: Mstrict,
                name: Id(root|aast-output/basic_stmt.hack(40:9-13), "foo3"),
                fun: Fun_ {
                    span: root|aast-output/basic_stmt.hack(40:0-49:1),
                    readonly_this: None,
                    annotation: (),
                    readonly_ret: None,
                    ret: TypeHint(
                        (),
                        Some(
                            Hint(
                                root|aast-output/basic_stmt.hack(40:32-40),
                                Happly(
                                    Id(root|aast-output/basic_stmt.hack(40:32-40), "arraykey"),
                                    [],
                                ),
                            ),
                        ),
                    ),
                    params: [
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(40:14-17),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(40:14-17), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(40:18-20),
                            name: "$a",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(40:22-25),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(40:22-25), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(40:26-28),
                            name: "$b",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                    ],
                    ctxs: None,
                    unsafe_ctxs: None,
                    body: FuncBody {
                        fb_ast: Block(
                            [
                                Stmt(
                                    root|aast-output/basic_stmt.hack(41:1-10),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(41:1-9),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(41:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(41:1-3),
                                                                (
                                                                    0,
                                                                    "$c",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(41:6-9),
                                                        Float(
                                                            "1.0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(42:1-8),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(42:1-7),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(42:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(42:1-3),
                                                                (
                                                                    0,
                                                                    "$d",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(42:6-7),
                                                        Int(
                                                            "0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(44:1-46:2),
                                    If(
                                        (
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(44:5-18),
                                                Binop(
                                                    Binop {
                                                        bop: Eqeq,
                                                        lhs: Expr(
                                                            (),
                                                            root|aast-output/basic_stmt.hack(44:5-7),
                                                            Lvar(
                                                                Lid(
                                                                    root|aast-output/basic_stmt.hack(44:5-7),
                                                                    (
                                                                        0,
                                                                        "$b",
                                                                    ),
                                                                ),
                                                            ),
                                                        ),
                                                        rhs: Expr(
                                                            (),
                                                            root|aast-output/basic_stmt.hack(44:11-18),
                                                            String(
                                                                "hello",
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ),
                                            Block(
                                                [
                                                    Stmt(
                                                        root|aast-output/basic_stmt.hack(45:2-12),
                                                        Return(
                                                            Some(
                                                                Expr(
                                                                    (),
                                                                    root|aast-output/basic_stmt.hack(45:9-11),
                                                                    Lvar(
                                                                        Lid(
                                                                            root|aast-output/basic_stmt.hack(45:9-11),
                                                                            (
                                                                                0,
                                                                                "$b",
                                                                            ),
                                                                        ),
                                                                    ),
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                ],
                                            ),
                                            Block(
                                                [
                                                    Stmt(
                                                        Pos::NONE,
                                                        Noop,
                                                    ),
                                                ],
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(48:1-11),
                                    Return(
                                        Some(
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(48:8-10),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(48:8-10),
                                                        (
                                                            0,
                                                            "$c",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                    fun_kind: FSync,
                    user_attributes: UserAttributes(
                        [],
                    ),
                    external: false,
                    doc_comment: None,
                },
                internal: false,
                module: None,
                tparams: [],
                where_constraints: [],
            },
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(52:0-7),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(52:0-6),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(52:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(52:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(52:5-6),
                                    Int(
                                        "1",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(53:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(53:0-12),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(53:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(53:0-2),
                                            (
                                                0,
                                                "$b",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(53:5-12),
                                    String(
                                        "hello",
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(55:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(55:0-12),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(55:0-4),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(55:0-4), "foo4"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(55:5-7),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(55:5-7),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(55:9-11),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(55:9-11),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Fun(
            FunDef {
                namespace: Env {
                    ns_uses: {
                        "Rx": "HH\\Rx",
                    },
                    class_uses: {
                        "AnyArray": "HH\\AnyArray",
                        "AsyncFunctionWaitHandle": "HH\\AsyncFunctionWaitHandle",
                        "AsyncGenerator": "HH\\AsyncGenerator",
                        "AsyncGeneratorWaitHandle": "HH\\AsyncGeneratorWaitHandle",
                        "AsyncIterator": "HH\\AsyncIterator",
                        "AsyncKeyedIterator": "HH\\AsyncKeyedIterator",
                        "AwaitAllWaitHandle": "HH\\AwaitAllWaitHandle",
                        "Awaitable": "HH\\Awaitable",
                        "Collection": "HH\\Collection",
                        "ConcurrentWaitHandle": "HH\\ConcurrentWaitHandle",
                        "ConditionWaitHandle": "HH\\ConditionWaitHandle",
                        "Container": "HH\\Container",
                        "ExternalThreadEventWaitHandle": "HH\\ExternalThreadEventWaitHandle",
                        "IMemoizeParam": "HH\\IMemoizeParam",
                        "ImmMap": "HH\\ImmMap",
                        "ImmSet": "HH\\ImmSet",
                        "ImmVector": "HH\\ImmVector",
                        "InvariantException": "HH\\InvariantException",
                        "Iterable": "HH\\Iterable",
                        "Iterator": "HH\\Iterator",
                        "KeyedContainer": "HH\\KeyedContainer",
                        "KeyedIterable": "HH\\KeyedIterable",
                        "KeyedIterator": "HH\\KeyedIterator",
                        "KeyedTraversable": "HH\\KeyedTraversable",
                        "Map": "HH\\Map",
                        "ObjprofObjectStats": "HH\\ObjprofObjectStats",
                        "ObjprofPathsStats": "HH\\ObjprofPathsStats",
                        "ObjprofStringStats": "HH\\ObjprofStringStats",
                        "Pair": "HH\\Pair",
                        "RescheduleWaitHandle": "HH\\RescheduleWaitHandle",
                        "ResumableWaitHandle": "HH\\ResumableWaitHandle",
                        "Set": "HH\\Set",
                        "Shapes": "HH\\Shapes",
                        "SleepWaitHandle": "HH\\SleepWaitHandle",
                        "StaticWaitHandle": "HH\\StaticWaitHandle",
                        "Traversable": "HH\\Traversable",
                        "TypeStructure": "HH\\TypeStructure",
                        "TypeStructureKind": "HH\\TypeStructureKind",
                        "UNSAFESingletonMemoizeParam": "HH\\UNSAFESingletonMemoizeParam",
                        "Vector": "HH\\Vector",
                        "WaitableWaitHandle": "HH\\WaitableWaitHandle",
                        "XenonSample": "HH\\XenonSample",
                        "classname": "HH\\classname",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "keyset": "HH\\keyset",
                        "supportdyn": "HH\\supportdyn",
                        "typename": "HH\\typename",
                        "varray": "HH\\varray",
                        "varray_or_darray": "HH\\varray_or_darray",
                        "vec": "HH\\vec",
                        "vec_or_dict": "HH\\vec_or_dict",
                    },
                    fun_uses: {
                        "asio_get_current_context_idx": "HH\\asio_get_current_context_idx",
                        "asio_get_running": "HH\\asio_get_running",
                        "asio_get_running_in_context": "HH\\asio_get_running_in_context",
                        "class_meth": "HH\\class_meth",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "fun": "HH\\fun",
                        "heapgraph_create": "HH\\heapgraph_create",
                        "heapgraph_dfs_edges": "HH\\heapgraph_dfs_edges",
                        "heapgraph_dfs_nodes": "HH\\heapgraph_dfs_nodes",
                        "heapgraph_edge": "HH\\heapgraph_edge",
                        "heapgraph_foreach_edge": "HH\\heapgraph_foreach_edge",
                        "heapgraph_foreach_node": "HH\\heapgraph_foreach_node",
                        "heapgraph_foreach_root": "HH\\heapgraph_foreach_root",
                        "heapgraph_node": "HH\\heapgraph_node",
                        "heapgraph_node_in_edges": "HH\\heapgraph_node_in_edges",
                        "heapgraph_node_out_edges": "HH\\heapgraph_node_out_edges",
                        "heapgraph_stats": "HH\\heapgraph_stats",
                        "idx": "HH\\idx",
                        "idx_readonly": "HH\\idx_readonly",
                        "inst_meth": "HH\\inst_meth",
                        "invariant": "HH\\invariant",
                        "invariant_callback_register": "HH\\invariant_callback_register",
                        "invariant_violation": "HH\\invariant_violation",
                        "is_darray": "HH\\is_darray",
                        "is_dict": "HH\\is_dict",
                        "is_keyset": "HH\\is_keyset",
                        "is_varray": "HH\\is_varray",
                        "is_vec": "HH\\is_vec",
                        "keyset": "HH\\keyset",
                        "meth_caller": "HH\\meth_caller",
                        "objprof_get_data": "HH\\objprof_get_data",
                        "objprof_get_data_extended": "HH\\objprof_get_data_extended",
                        "objprof_get_paths": "HH\\objprof_get_paths",
                        "package_exists": "HH\\package_exists",
                        "server_warmup_status": "HH\\server_warmup_status",
                        "thread_mark_stack": "HH\\thread_mark_stack",
                        "thread_memory_stats": "HH\\thread_memory_stats",
                        "type_structure": "HH\\type_structure",
                        "type_structure_for_alias": "HH\\type_structure_for_alias",
                        "varray": "HH\\varray",
                        "vec": "HH\\vec",
                        "xenon_get_data": "HH\\xenon_get_data",
                    },
                    const_uses: {},
                    name: None,
                    is_codegen: false,
                    disable_xhp_element_mangling: false,
                },
                file_attributes: [],
                mode: Mstrict,
                name: Id(root|aast-output/basic_stmt.hack(57:9-13), "foo4"),
                fun: Fun_ {
                    span: root|aast-output/basic_stmt.hack(57:0-69:1),
                    readonly_this: None,
                    annotation: (),
                    readonly_ret: None,
                    ret: TypeHint(
                        (),
                        Some(
                            Hint(
                                root|aast-output/basic_stmt.hack(57:32-37),
                                Happly(
                                    Id(root|aast-output/basic_stmt.hack(57:32-37), "float"),
                                    [],
                                ),
                            ),
                        ),
                    ),
                    params: [
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(57:14-17),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(57:14-17), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(57:18-20),
                            name: "$a",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(57:22-25),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(57:22-25), "int"),
                                            [],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(57:26-28),
                            name: "$b",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                    ],
                    ctxs: None,
                    unsafe_ctxs: None,
                    body: FuncBody {
                        fb_ast: Block(
                            [
                                Stmt(
                                    root|aast-output/basic_stmt.hack(58:1-10),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(58:1-9),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(58:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(58:1-3),
                                                                (
                                                                    0,
                                                                    "$c",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(58:6-9),
                                                        Float(
                                                            "1.0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(59:1-8),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(59:1-7),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(59:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(59:1-3),
                                                                (
                                                                    0,
                                                                    "$d",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(59:6-7),
                                                        Int(
                                                            "0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(61:1-66:2),
                                    Switch(
                                        (
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(61:9-11),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(61:9-11),
                                                        (
                                                            0,
                                                            "$b",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                            [
                                                Case(
                                                    Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(62:7-14),
                                                        String(
                                                            "hello",
                                                        ),
                                                    ),
                                                    Block(
                                                        [
                                                            Stmt(
                                                                root|aast-output/basic_stmt.hack(63:3-16),
                                                                Return(
                                                                    Some(
                                                                        Expr(
                                                                            (),
                                                                            root|aast-output/basic_stmt.hack(63:10-15),
                                                                            String(
                                                                                "yes",
                                                                            ),
                                                                        ),
                                                                    ),
                                                                ),
                                                            ),
                                                        ],
                                                    ),
                                                ),
                                            ],
                                            Some(
                                                DefaultCase(
                                                    root|aast-output/basic_stmt.hack(64:2-10),
                                                    Block(
                                                        [
                                                            Stmt(
                                                                root|aast-output/basic_stmt.hack(65:3-15),
                                                                Return(
                                                                    Some(
                                                                        Expr(
                                                                            (),
                                                                            root|aast-output/basic_stmt.hack(65:10-14),
                                                                            String(
                                                                                "no",
                                                                            ),
                                                                        ),
                                                                    ),
                                                                ),
                                                            ),
                                                        ],
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(68:1-11),
                                    Return(
                                        Some(
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(68:8-10),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(68:8-10),
                                                        (
                                                            0,
                                                            "$c",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                    fun_kind: FSync,
                    user_attributes: UserAttributes(
                        [],
                    ),
                    external: false,
                    doc_comment: None,
                },
                internal: false,
                module: None,
                tparams: [],
                where_constraints: [],
            },
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(72:0-16),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(72:0-15),
                        Binop(
                            Binop {
                                bop: Eq(
                                    None,
                                ),
                                lhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(72:0-2),
                                    Lvar(
                                        Lid(
                                            root|aast-output/basic_stmt.hack(72:0-2),
                                            (
                                                0,
                                                "$a",
                                            ),
                                        ),
                                    ),
                                ),
                                rhs: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(72:5-15),
                                    ValCollection(
                                        (
                                            (
                                                root|aast-output/basic_stmt.hack(72:5-8),
                                                Vec,
                                            ),
                                            None,
                                            [
                                                Expr(
                                                    (),
                                                    root|aast-output/basic_stmt.hack(72:9-10),
                                                    Int(
                                                        "1",
                                                    ),
                                                ),
                                                Expr(
                                                    (),
                                                    root|aast-output/basic_stmt.hack(72:11-12),
                                                    Int(
                                                        "2",
                                                    ),
                                                ),
                                                Expr(
                                                    (),
                                                    root|aast-output/basic_stmt.hack(72:13-14),
                                                    Int(
                                                        "3",
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                ),
                            },
                        ),
                    ),
                ),
            ),
        ),
        Stmt(
            Stmt(
                root|aast-output/basic_stmt.hack(74:0-13),
                Expr(
                    Expr(
                        (),
                        root|aast-output/basic_stmt.hack(74:0-12),
                        Call(
                            CallExpr {
                                func: Expr(
                                    (),
                                    root|aast-output/basic_stmt.hack(74:0-4),
                                    Id(
                                        Id(root|aast-output/basic_stmt.hack(74:0-4), "foo5"),
                                    ),
                                ),
                                targs: [],
                                args: [
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(74:5-7),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(74:5-7),
                                                    (
                                                        0,
                                                        "$a",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                    (
                                        Pnormal,
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(74:9-11),
                                            Lvar(
                                                Lid(
                                                    root|aast-output/basic_stmt.hack(74:9-11),
                                                    (
                                                        0,
                                                        "$b",
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ],
                                unpacked_arg: None,
                            },
                        ),
                    ),
                ),
            ),
        ),
        Fun(
            FunDef {
                namespace: Env {
                    ns_uses: {
                        "Rx": "HH\\Rx",
                    },
                    class_uses: {
                        "AnyArray": "HH\\AnyArray",
                        "AsyncFunctionWaitHandle": "HH\\AsyncFunctionWaitHandle",
                        "AsyncGenerator": "HH\\AsyncGenerator",
                        "AsyncGeneratorWaitHandle": "HH\\AsyncGeneratorWaitHandle",
                        "AsyncIterator": "HH\\AsyncIterator",
                        "AsyncKeyedIterator": "HH\\AsyncKeyedIterator",
                        "AwaitAllWaitHandle": "HH\\AwaitAllWaitHandle",
                        "Awaitable": "HH\\Awaitable",
                        "Collection": "HH\\Collection",
                        "ConcurrentWaitHandle": "HH\\ConcurrentWaitHandle",
                        "ConditionWaitHandle": "HH\\ConditionWaitHandle",
                        "Container": "HH\\Container",
                        "ExternalThreadEventWaitHandle": "HH\\ExternalThreadEventWaitHandle",
                        "IMemoizeParam": "HH\\IMemoizeParam",
                        "ImmMap": "HH\\ImmMap",
                        "ImmSet": "HH\\ImmSet",
                        "ImmVector": "HH\\ImmVector",
                        "InvariantException": "HH\\InvariantException",
                        "Iterable": "HH\\Iterable",
                        "Iterator": "HH\\Iterator",
                        "KeyedContainer": "HH\\KeyedContainer",
                        "KeyedIterable": "HH\\KeyedIterable",
                        "KeyedIterator": "HH\\KeyedIterator",
                        "KeyedTraversable": "HH\\KeyedTraversable",
                        "Map": "HH\\Map",
                        "ObjprofObjectStats": "HH\\ObjprofObjectStats",
                        "ObjprofPathsStats": "HH\\ObjprofPathsStats",
                        "ObjprofStringStats": "HH\\ObjprofStringStats",
                        "Pair": "HH\\Pair",
                        "RescheduleWaitHandle": "HH\\RescheduleWaitHandle",
                        "ResumableWaitHandle": "HH\\ResumableWaitHandle",
                        "Set": "HH\\Set",
                        "Shapes": "HH\\Shapes",
                        "SleepWaitHandle": "HH\\SleepWaitHandle",
                        "StaticWaitHandle": "HH\\StaticWaitHandle",
                        "Traversable": "HH\\Traversable",
                        "TypeStructure": "HH\\TypeStructure",
                        "TypeStructureKind": "HH\\TypeStructureKind",
                        "UNSAFESingletonMemoizeParam": "HH\\UNSAFESingletonMemoizeParam",
                        "Vector": "HH\\Vector",
                        "WaitableWaitHandle": "HH\\WaitableWaitHandle",
                        "XenonSample": "HH\\XenonSample",
                        "classname": "HH\\classname",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "keyset": "HH\\keyset",
                        "supportdyn": "HH\\supportdyn",
                        "typename": "HH\\typename",
                        "varray": "HH\\varray",
                        "varray_or_darray": "HH\\varray_or_darray",
                        "vec": "HH\\vec",
                        "vec_or_dict": "HH\\vec_or_dict",
                    },
                    fun_uses: {
                        "asio_get_current_context_idx": "HH\\asio_get_current_context_idx",
                        "asio_get_running": "HH\\asio_get_running",
                        "asio_get_running_in_context": "HH\\asio_get_running_in_context",
                        "class_meth": "HH\\class_meth",
                        "darray": "HH\\darray",
                        "dict": "HH\\dict",
                        "fun": "HH\\fun",
                        "heapgraph_create": "HH\\heapgraph_create",
                        "heapgraph_dfs_edges": "HH\\heapgraph_dfs_edges",
                        "heapgraph_dfs_nodes": "HH\\heapgraph_dfs_nodes",
                        "heapgraph_edge": "HH\\heapgraph_edge",
                        "heapgraph_foreach_edge": "HH\\heapgraph_foreach_edge",
                        "heapgraph_foreach_node": "HH\\heapgraph_foreach_node",
                        "heapgraph_foreach_root": "HH\\heapgraph_foreach_root",
                        "heapgraph_node": "HH\\heapgraph_node",
                        "heapgraph_node_in_edges": "HH\\heapgraph_node_in_edges",
                        "heapgraph_node_out_edges": "HH\\heapgraph_node_out_edges",
                        "heapgraph_stats": "HH\\heapgraph_stats",
                        "idx": "HH\\idx",
                        "idx_readonly": "HH\\idx_readonly",
                        "inst_meth": "HH\\inst_meth",
                        "invariant": "HH\\invariant",
                        "invariant_callback_register": "HH\\invariant_callback_register",
                        "invariant_violation": "HH\\invariant_violation",
                        "is_darray": "HH\\is_darray",
                        "is_dict": "HH\\is_dict",
                        "is_keyset": "HH\\is_keyset",
                        "is_varray": "HH\\is_varray",
                        "is_vec": "HH\\is_vec",
                        "keyset": "HH\\keyset",
                        "meth_caller": "HH\\meth_caller",
                        "objprof_get_data": "HH\\objprof_get_data",
                        "objprof_get_data_extended": "HH\\objprof_get_data_extended",
                        "objprof_get_paths": "HH\\objprof_get_paths",
                        "package_exists": "HH\\package_exists",
                        "server_warmup_status": "HH\\server_warmup_status",
                        "thread_mark_stack": "HH\\thread_mark_stack",
                        "thread_memory_stats": "HH\\thread_memory_stats",
                        "type_structure": "HH\\type_structure",
                        "type_structure_for_alias": "HH\\type_structure_for_alias",
                        "varray": "HH\\varray",
                        "vec": "HH\\vec",
                        "xenon_get_data": "HH\\xenon_get_data",
                    },
                    const_uses: {},
                    name: None,
                    is_codegen: false,
                    disable_xhp_element_mangling: false,
                },
                file_attributes: [],
                mode: Mstrict,
                name: Id(root|aast-output/basic_stmt.hack(76:9-13), "foo5"),
                fun: Fun_ {
                    span: root|aast-output/basic_stmt.hack(76:0-86:0),
                    readonly_this: None,
                    annotation: (),
                    readonly_ret: None,
                    ret: TypeHint(
                        (),
                        Some(
                            Hint(
                                root|aast-output/basic_stmt.hack(76:29-37),
                                Happly(
                                    Id(root|aast-output/basic_stmt.hack(76:29-37), "arraykey"),
                                    [],
                                ),
                            ),
                        ),
                    ),
                    params: [
                        FunParam {
                            annotation: (),
                            type_hint: TypeHint(
                                (),
                                Some(
                                    Hint(
                                        root|aast-output/basic_stmt.hack(76:14-22),
                                        Happly(
                                            Id(root|aast-output/basic_stmt.hack(76:14-17), "vec"),
                                            [
                                                Hint(
                                                    root|aast-output/basic_stmt.hack(76:18-21),
                                                    Happly(
                                                        Id(root|aast-output/basic_stmt.hack(76:18-21), "int"),
                                                        [],
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                ),
                            ),
                            is_variadic: false,
                            pos: root|aast-output/basic_stmt.hack(76:23-25),
                            name: "$a",
                            expr: None,
                            readonly: None,
                            callconv: Pnormal,
                            user_attributes: UserAttributes(
                                [],
                            ),
                            visibility: None,
                        },
                    ],
                    ctxs: None,
                    unsafe_ctxs: None,
                    body: FuncBody {
                        fb_ast: Block(
                            [
                                Stmt(
                                    root|aast-output/basic_stmt.hack(77:1-10),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(77:1-9),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(77:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(77:1-3),
                                                                (
                                                                    0,
                                                                    "$c",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(77:6-9),
                                                        Float(
                                                            "1.0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(78:1-8),
                                    Expr(
                                        Expr(
                                            (),
                                            root|aast-output/basic_stmt.hack(78:1-7),
                                            Binop(
                                                Binop {
                                                    bop: Eq(
                                                        None,
                                                    ),
                                                    lhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(78:1-3),
                                                        Lvar(
                                                            Lid(
                                                                root|aast-output/basic_stmt.hack(78:1-3),
                                                                (
                                                                    0,
                                                                    "$d",
                                                                ),
                                                            ),
                                                        ),
                                                    ),
                                                    rhs: Expr(
                                                        (),
                                                        root|aast-output/basic_stmt.hack(78:6-7),
                                                        Int(
                                                            "0",
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(80:1-82:2),
                                    Foreach(
                                        (
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(80:10-12),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(80:10-12),
                                                        (
                                                            0,
                                                            "$a",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                            AsV(
                                                Expr(
                                                    (),
                                                    root|aast-output/basic_stmt.hack(80:16-20),
                                                    Lvar(
                                                        Lid(
                                                            root|aast-output/basic_stmt.hack(80:16-20),
                                                            (
                                                                0,
                                                                "$val",
                                                            ),
                                                        ),
                                                    ),
                                                ),
                                            ),
                                            Block(
                                                [],
                                            ),
                                        ),
                                    ),
                                ),
                                Stmt(
                                    root|aast-output/basic_stmt.hack(84:1-11),
                                    Return(
                                        Some(
                                            Expr(
                                                (),
                                                root|aast-output/basic_stmt.hack(84:8-10),
                                                Lvar(
                                                    Lid(
                                                        root|aast-output/basic_stmt.hack(84:8-10),
                                                        (
                                                            0,
                                                            "$c",
                                                        ),
                                                    ),
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                    fun_kind: FSync,
                    user_attributes: UserAttributes(
                        [],
                    ),
                    external: false,
                    doc_comment: None,
                },
                internal: false,
                module: None,
                tparams: [],
                where_constraints: [],
            },
        ),
    ],
)